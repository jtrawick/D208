# Load in the tidyverse
# Suppress the overwritten functions messages
suppressPackageStartupMessages(library(tidyverse))
library(skimr)
# Load in the tidyverse
# Suppress the overwritten functions messages
suppressPackageStartupMessages(suppressPackageStartupWarnings(library(tidyverse)))
# Load in the tidyverse
# Suppress the overwritten functions messages
suppressPackageStartupMessages(suppressWarnings(library(tidyverse)))
suppress
# Load in the tidyverse
# Suppress the overwritten functions messages
suppressPackageStartupMessages(library(tidyverse))
suppress
# Load in the tidyverse
# Suppress the overwritten functions messages
suppressPackageStartupMessages(library(tidyverse))
library(skimr)
# Read dataset in
df <- read.csv("./data/medical_clean.csv")
# Start with a quick glimpse of the data for orientation and future reference
glimpse(df)
# Partition dataset to include only features to be initially included in model
# Initial_days is reordered to first position for ease of reference
init_mdl <- df %>%
select(Initial_days,
Area,
Children:Services,
TotalCharge,
Additional_charges)
# View new dataframe and assess dtypes
init_mdl %>%
glimpse()
# Start with reformatting all chr variables as fct
init_mdl[sapply(init_mdl, is.character)] <- lapply(init_mdl[sapply(init_mdl, is.character)], as.factor)
# Next, list cols that need conversion to factor type
fctvars <- colnames(init_mdl[sapply(init_mdl, class) == "character"])
init_mdl[fctvars] <- lapply(init_mdl[fctvars], factor)
summary(init_mdl)
# Start with reformatting all chr variables as fct
init_mdl[sapply(init_mdl, is.character)] <- lapply(init_mdl[sapply(init_mdl, is.character)], as.factor)
# Next, list cols that need conversion to factor type
fctvars <- colnames(init_mdl[sapply(init_mdl, class) == "character"])
init_mdl[fctvars] <- lapply(init_mdl[fctvars], factor)
skim(init_mdl)
# Start with reformatting all chr variables as fct
init_mdl[sapply(init_mdl, is.character)] <- lapply(init_mdl[sapply(init_mdl, is.character)], as.factor)
# Next, list cols that need conversion to factor type
fctvars <- colnames(init_mdl[sapply(init_mdl, class) == "character"])
init_mdl[fctvars] <- lapply(init_mdl[fctvars], factor)
skim_without_charts(init_mdl)
# Start with reformatting all chr variables as fct
init_mdl[sapply(init_mdl, is.character)] <- lapply(init_mdl[sapply(init_mdl, is.character)], as.factor)
skim_without_charts(init_mdl)
init_mdl["Initial_admin"] <- factor(init_mdl["Initial_admin"],
c("Elective Admission",
"Observation Admission",
"Emergency Admission"),
ordered = TRUE)
levels(init_mdl["Initial_admin"])
init_mdl["Initial_admin"] <- factor(init_mdl["Initial_admin"],
c("Elective Admission",
"Observation Admission",
"Emergency Admission"),
ordered = TRUE)
table(init_mdl["Initial_admin"])
init_mdl$Initial_admin
# Read dataset in
df <- read.csv("./data/medical_clean.csv")
# Start with a quick glimpse of the data for orientation and future reference
glimpse(df)
# Start with a quick glimpse of the data for orientation and future reference
glimpse(df)
# Partition dataset to include only features to be initially included in model
# Initial_days is reordered to first position for ease of reference
init_mdl <- df %>%
select(Initial_days,
Area,
Children:Services,
TotalCharge,
Additional_charges)
# View new dataframe and assess dtypes
init_mdl %>%
glimpse()
# Start with reformatting all chr variables as fct
init_mdl[sapply(init_mdl, is.character)] <- lapply(init_mdl[sapply(init_mdl, is.character)], as.factor)
# Reassess dataframe structure using skim()
skim_without_charts(init_mdl)
init_mdl$Initial_admin
init_mdl["Initial_admin"]
# Start with reformatting all chr variables as fct
init_mdl[sapply(init_mdl, is.character)] <- lapply(init_mdl[sapply(init_mdl, is.character)], as.factor)
# Reassess dataframe structure using skim()
skim_without_charts(init_mdl)
factor(init_mdl["Initial_admin"])
# Start with reformatting all chr variables as fct
init_mdl[sapply(init_mdl, is.character)] <- lapply(init_mdl[sapply(init_mdl, is.character)], as.factor)
# Reassess dataframe structure using skim()
skim_without_charts(init_mdl)
init_mdl["Initial_admin"]
# Start with reformatting all chr variables as fct
init_mdl[sapply(init_mdl, is.character)] <- lapply(init_mdl[sapply(init_mdl, is.character)], as.factor)
# Reassess dataframe structure using skim()
skim_without_charts(init_mdl)
init_mdl$Initial_admin
factor(init_mdl$Initial_admin, levels = c("Elective Admission", "Observation Admission", "Emergency Admission"), ordered = TRUE)
levels(init_mdl$Initial_admin)
skim(init_mdl)
levels(init_mdl$Initial_admin)
factor(init_mdl$Initial_admin, levels = c("Elective Admission", "Observation Admission", "Emergency Admission"), ordered = TRUE)
levels(init_mdl$Initial_admin)
skim(init_mdl)
table(init_mdl$Initial_admin)
table(init_mdl$Complication_risk)
levels(init_mdl$Complication_risk)
levels(init_mdl$Complication_risk) <- c("Low", "Medium", "High")
levels(init_mdl$Complication_risk)
skim(init_mdl)
is.ordered(init_mdl$Gender)
is.ordered(init_mdl$Initial_admin)
# Access levels() for each variable
levels(init_mdl$Initial_admin)
levels(init_mdl$Complication_risk)
levels(init_mdl$Overweight)
# Access levels() for each variable
levels(init_mdl$Initial_admin)
levels(init_mdl$Complication_risk)
levels(init_mdl$Overweight)
is.ordered(init_mdl$Initial_admin)
is.ordered(init_mdl$Complication_risk)
is.ordered(init_mdl$Overweight)
# Access levels() for each variable
levels(init_mdl$Initial_admin)
levels(init_mdl$Complication_risk)
# Check if the factor is ordered
is.ordered(init_mdl$Initial_admin)
is.ordered(init_mdl$Complication_risk)
# Partition dataset to include only features to be initially included in model
# Initial_days is reordered to first position for ease of reference
init_mdl <- df %>%
select(Initial_days,
Area,
Children:Services,
TotalCharge,
Additional_charges)
# View new dataframe and assess dtypes
init_mdl %>%
glimpse()
# Start with reformatting all chr variables as fct
init_mdl[sapply(init_mdl, is.character)] <- lapply(init_mdl[sapply(init_mdl, is.character)], as.factor)
# Reassess dataframe structure using skim()
skim_without_charts(init_mdl)
# Access levels() for each variable
levels(init_mdl$Initial_admin)
levels(init_mdl$Complication_risk)
# Check if the factor is ordered
is.ordered(init_mdl$Initial_admin)
is.ordered(init_mdl$Complication_risk)
init_mdl$Initial_admin <- factor(init_mdl$Initial_admin,
levels = c("Elective Admission",
"Observation Admission",
"Emergency Admission"),
ordered = TRUE)
init_mdl$Complication_risk <- factor(init_mdl$Complication_risk,
levels = c("Low",
"Medium",
"High"),
ordered = TRUE)
# Access levels() for each variable
levels(init_mdl$Initial_admin)
levels(init_mdl$Complication_risk)
# Check if the factor is ordered
is.ordered(init_mdl$Initial_admin)
is.ordered(init_mdl$Complication_risk)
table(init_mdl$Initial_admin)
ordered.init_mdl$Initial_admin
init_mdl$Initial_admin
levels(init_mdl$Initial_admin)
levels(init_mdl)
sapply(init_mdl, levels)
order(init_mdl$Initial_admin)
