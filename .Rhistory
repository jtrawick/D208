Additional_charges)
# View new dataframe and assess dtypes
init_mdl %>%
skim()
# Show scatterplot matrix of numeric variables
num_vars <- init_mdl %>%
select_if(is.numeric)
# Show scatterplot matrix of numeric variables
num_vars <- init_mdl %>%
select_if(is.numeric)
skim(num_vars)
# Partition model data for only numeric variables
num_vars <- init_mdl %>%
select_if(is.numeric)
# Show scatterplot matrix of numeric variables
pairs(num_vars)
boxplot.matrix(num_vars)
boxplot.matrix(num_vars, use.cols = TRUE)
boxplot.matrix(num_vars, use.cols = FALSE)
boxplot(num_vars)
boxplot(Initial_days ~ Initial_admin, data = init_mdl)
boxplot(Initial_days ~ Initial_admin + ReAdmis, data = init_mdl)
boxplot(Initial_days ~ Initial_admin, data = init_mdl)
boxplot(Initial_days ~ Age, data = init_mdl)
boxplot(Initial_days ~ Marital, data = init_mdl)
boxplot(Initial_days ~ Overweight, data = init_mdl)
boxplot(Initial_days ~ Complication_risk, data = init_mdl)
boxplot(num_vars, col = rainbow(ncol(num_vars)))
boxplot(num_vars, col = rainbow(ncol(num_vars -TotalCharge)))
boxplot(num_vars, col = rainbow(ncol(select(num_vars, -TotalCharge))))
num_vars %>%
boxplot()
num_vars %>%
boxplot( rainbow())
num_vars %>%
select(-TotalCharge)
boxplot()
num_vars %>%
select(-TotalCharge) %>%
boxplot()
num_vars %>%
select(-Income) %>%
boxplot()
num_vars %>%
select(-Income, Additional_charges) %>%
boxplot()
num_vars %>%
select(-Income, -Additional_charges) %>%
boxplot()
num_vars %>%
select(-Income, -Additional_charges, -TotalCharge) %>%
boxplot()
num_vars() %>%
ggplot(aes(x=variable, y=value)) +
geom_boxplot(aes(fill=Label)) +
facet_wrap( ~ variable, scales="free")
num_vars %>%
ggplot(aes(x=variable, y=value)) +
geom_boxplot(aes(fill=Label)) +
facet_wrap( ~ variable, scales="free")
par(mfrow = c(1,2))
boxplot(Initial_days ~ Complication_risk, data = init_mdl)
par(mfrow = c(2,2))
boxplot(Initial_days ~ Complication_risk, data = init_mdl)
par(mfrow = c(2,3))
boxplot(Initial_days ~ Complication_risk, data = init_mdl)
par(mfrow = c(2,3))
boxplot(Initial_days ~ Complication_risk, data = init_mdl)
boxplot(Initial_days ~ Gender, data = init_mdl)
boxplot(Initial_days ~ Overweight, data = init_mdl)
boxplot(Initial_days ~ VitD_levels, data = init_mdl)
boxplot(Initial_days ~ ReAdmis, data = init_mdl)
boxplot(Initial_days ~ Initial_admin, data = init_mdl)
par(mfrow = c(2,3))
boxplot(Initial_days ~ Complication_risk, data = init_mdl)
boxplot(Initial_days ~ Gender, data = init_mdl)
boxplot(Initial_days ~ Overweight, data = init_mdl)
boxplot(Initial_days ~ Diabetes, data = init_mdl)
boxplot(Initial_days ~ ReAdmis, data = init_mdl)
boxplot(Initial_days ~ Initial_admin, data = init_mdl)
par(mfrow = c(2,3))
boxplot(Initial_days ~ Complication_risk, data = init_mdl)
boxplot(Initial_days ~ Gender, data = init_mdl)
boxplot(Initial_days ~ Overweight, data = init_mdl)
boxplot(Initial_days ~ Stroke, data = init_mdl)
boxplot(Initial_days ~ ReAdmis, data = init_mdl)
boxplot(Initial_days ~ Initial_admin, data = init_mdl)
par(mfrow = c(2,3))
boxplot(Initial_days ~ Complication_risk, data = init_mdl)
boxplot(Initial_days ~ Gender, data = init_mdl)
boxplot(Initial_days ~ Overweight, data = init_mdl)
boxplot(Initial_days ~ Hypertension, data = init_mdl)
par(mfrow = c(2,3))
boxplot(Initial_days ~ Complication_risk, data = init_mdl)
boxplot(Initial_days ~ Gender, data = init_mdl)
boxplot(Initial_days ~ Overweight, data = init_mdl)
boxplot(Initial_days ~ HighBlood, data = init_mdl)
boxplot(Initial_days ~ ReAdmis, data = init_mdl)
boxplot(Initial_days ~ Initial_admin, data = init_mdl)
par(mfrow = c(2,3))
boxplot(Initial_days ~ Complication_risk, data = init_mdl)
boxplot(Initial_days ~ Gender, data = init_mdl)
boxplot(Initial_days ~ Overweight, data = init_mdl)
boxplot(Initial_days ~ Anxiety, data = init_mdl)
boxplot(Initial_days ~ ReAdmis, data = init_mdl)
boxplot(Initial_days ~ Initial_admin, data = init_mdl)
# Load in the tidyverse, skimr, and Hmisc
library(tidyverse)
library(skimr)
library(Hmisc)
# Read dataset in
df <- read.csv("./data/medical_clean.csv")
# Start with a quick skim of the data for orientation and future reference
skim(df)
# Partition dataset to include only features to be initially included in model
# Initial_days is reordered to first position for ease of reference
init_mdl <- df %>%
select(Initial_days,
Area,
Children:Services,
TotalCharge,
Additional_charges)
# View new dataframe and assess dtypes
init_mdl %>%
skim()
# Start with reformatting all chr variables as fct
init_mdl[sapply(init_mdl, is.character)] <- lapply(init_mdl[sapply(init_mdl, is.character)], as.factor)
# Reassess dataframe structure using skim()
skim_without_charts(init_mdl)
# Access levels() for each variable
levels(init_mdl$Initial_admin)
levels(init_mdl$Complication_risk)
# Check if the factor is ordered
is.ordered(init_mdl$Initial_admin)
is.ordered(init_mdl$Complication_risk)
# Re-level ordinal categorical variables for Initial_admin
init_mdl$Initial_admin <- factor(init_mdl$Initial_admin,
levels = c("Elective Admission",
"Observation Admission",
"Emergency Admission"),
ordered = TRUE)
# Re-level ordinal categorical variables for Complication_risk
init_mdl$Complication_risk <- factor(init_mdl$Complication_risk,
levels = c("Low",
"Medium",
"High"),
ordered = TRUE)
# Access levels() for each variable
levels(init_mdl$Initial_admin)
levels(init_mdl$Complication_risk)
# Check if the factor is ordered
is.ordered(init_mdl$Initial_admin)
is.ordered(init_mdl$Complication_risk)
# Show histograms for all numeric variables
par(mfrow = c(3,4))
hist(init_mdl %>%
select_if(is.numeric))
# Partition dichotomous Yes/No variables out for plot
dichotomous_vars <- init_mdl %>%
select(where(~n_distinct(.) == 2))
# Show bar charts of all Yes/No variables
dichotomous_vars %>%
gather() %>%
count(key, value) %>%
ggplot(., aes(x = value, y = n)) +
geom_bar(stat = "identity") +
facet_wrap(~key, scales = "free", nrow = 3)
# Partition non-dichotomous categorical variables
cat_vars <- init_mdl %>%
select_if(is.factor) %>%
select(where(~n_distinct(.) != 2))
# Rename levels to shorter versions to fit plots
levels(cat_vars$Marital) <- c("Divorced",
"Married",
"Never",
"Sep",
"Widow")
levels(cat_vars$Initial_admin) <- c("Elective",
"Observation",
"Emergency")
# Create panel of bar charts for cat_vars
par(mfrow = c(3,2))
barplot(table(cat_vars$Area), main = "Geographical Area")
barplot(table(cat_vars$Marital), main = "Marital Status")
barplot(table(cat_vars$Gender), main = "Gender")
barplot(table(cat_vars$Initial_admin), main = "Reason for Initial Admission")
barplot(table(cat_vars$Complication_risk), main = "Complication Risk")
barplot(table(cat_vars$Services), main = "Services Used")
# Partition model data for only numeric variables
num_vars <- init_mdl %>%
select_if(is.numeric)
# Show scatterplot matrix of numeric variables
pairs(num_vars)
# Boxplots of our target variable against some categorical variables
par(mfrow = c(2,3))
boxplot(Initial_days ~ Complication_risk, data = init_mdl)
boxplot(Initial_days ~ Gender, data = init_mdl)
boxplot(Initial_days ~ Overweight, data = init_mdl)
boxplot(Initial_days ~ Anxiety, data = init_mdl)
boxplot(Initial_days ~ ReAdmis, data = init_mdl)
boxplot(Initial_days ~ Initial_admin, data = init_mdl)
mdl_fit <- lm(Initial_days ~ .,
data = init_mdl)
summary(mdl_fit)
plot(mdl_fit)
summary(mdl_fit)$fstatistic
summary(mdl_fit)$coefficients
summary(mdl_fit)$coefficients %>% sort(decreasing = TRUE)
colnames(summary(mdl_fit)$coefficients)
colnames(summary(mdl_fit))
colnames(summary(mdl_fit)$coefficients)
summary(mdl_fit)$coefficients[,4]
typeof(summary(mdl_fit)$coefficients[,4])
typeof(summary(mdl_fit)$coefficients[[,4]])
typeof(summary(mdl_fit)$coefficients)
typeof(summary(mdl_fit))
typeof(summary(mdl_fit)$coefficients)
typeof(mdl_fit)
rbind(summary(mdl_fit)$coefficients[,4])
typeof(rbind(summary(mdl_fit)$coefficients[,4]))
cbind(summary(mdl_fit)$coefficients[,4])
typeof(cbind(summary(mdl_fit)$coefficients[,4]))
cbind(summary(mdl_fit)$coefficients[,4])[, 1]
cbind(summary(mdl_fit)$coefficients[,4])[, 0]
summary(cbind(summary(mdl_fit)$coefficients[,4]))
colnames(cbind(summary(mdl_fit)$coefficients[,4]))
cbind.data.frame(summary(mdl_fit)$coefficients[,4])
typeof(cbind.data.frame(summary(mdl_fit)$coefficients[,4]))
colnames(cbind.data.frame(summary(mdl_fit)$coefficients[,4]))
sort(cbind.data.frame(summary(mdl_fit)$coefficients[,4]), decreasing = TRUE)
order(cbind.data.frame(summary(mdl_fit)$coefficients[,4]), decreasing = TRUE)
testdf <- cbind.data.frame(summary(mdl_fit)$coefficients[,4])
testdf
typeof(testdf)
testdf[order(decreasing = TRUE)]
order(testdf, decreasing = TRUE)
tidy(mdl_fit)
library(broom)
tidy(mdl_fit)
typeof(tidy(mdl_fit))
testdf <- tidy(mdl_fit)
order(testdf, decreasing = TRUE)
testdf[order(decreasing = TRUE)]
colnames(testdf)
testdf[order("p.value")]
testdf[testdf[order("p.value")]]
testdf[,4]
testdf[,5]
skimr(testdf)
skim(testdf)
glance(testdf)
glimpse(testdf)
mode(testdf)
testdf[order(p.value)]
testdf[order(testdf$p.value)]
init_mdl.head()
head(init_mdl)
head(testdf)
head(df)
typeof(df)
mode(df)
class(df)
class(init_mdl)
class(testdf)
class(testdf.data.frame)
as.data.frame(testdf)
as.data.frame.list(testdf)
class(as.data.frame(testdf))
class(as.data.frame.list(testdf))
class(as.data.frame.Date(testdf))
class(as.matrix(testdf))
class(as.matrix.data.frame(testdf))
class(testdf)
tibble(testdf)
class(tibble(testdf))
as_data_frame(testdf)
as.data.frame(testdf)
class(as.data.frame(testdf))
typeof(as.data.frame(testdf))
testdf <- as.data.frame(testdf)
class(testdf)
testdf[order(testdf$p.value, decreasing = TRUE)]
testdf[order(testdf$p.value, decreasing = TRUE), ]
testdf[order(p.value, decreasing = TRUE), ]
testdf[order("p.value", decreasing = TRUE), ]
testdf[order(testdf$p.value, decreasing = TRUE), ]
count(init_mdl)
count(init_mdl[,:])
init_mdl[,:]
init_mdl[:,:]
init_mdl[:]
init_mdl[:][:]
init_mdl[1:,1:]
init_mdl[1:,]
init_mdl[1:5,]
init_mdl[0:5,]
colnames(testdf)
count(colnames(testdf))
count_fields(colnames(testdf))
ncol(testdf)
ncol(init_mdl)
While this view is the most useful for our purposes, and given that our initial model contains 29 features, it would be helpful to be able to view the summary output for the model in a way that allows us to sort by our selection criteria. To do this, we will use the `broom` package to create a dataframe from the `summary(mdl_fit)` output and sort by the P Value column. Our selection criteria is such that features with an f
```{r}
While this view is the most useful for our purposes, and given that our initial model contains 29 features, it would be helpful to be able to view the summary output for the model in a way that allows us to sort by our selection criteria. To do this, we will use the `broom` package to create a dataframe from the `summary(mdl_fit)` output and sort by the P Value column. Our selection criteria is such that features with an f
```{r}
plot(mdl_fit)
While this view is the most useful for our purposes, and given that our initial model contains 29 features, it would be helpful to be able to view the summary output for the model in a way that allows us to sort by our selection criteria. To do this, we will use the `broom` package to create a dataframe from the `summary(mdl_fit)` output and sort by the P Value column. Our selection criteria is such that features with an f
plot(mdl_fit)
class(summary(mdl_fit))
tibble(summary(mdl_fit))
tibble(summary(mdl_fit))
class(summary(mdl_fit)$coefficients)
tibble(summary(mdl_fit)$coefficients)
class(tibble(summary(mdl_fit)$coefficients))
class(mdl_fit)
class(mdl_fit)$coefficients
class(summary(mdl_fit))
class(tibble(summary(mdl_fit)$coefficients))
class(as.data.frame(tibble(summary(mdl_fit)$coefficients)))
# Create dataframe mdl_output from summary(mdl_fit)
mdl_output <- as.data.frame(tibble(summary(mdl_fit)$coefficients))
# Sort mdl_output coefficients by p-value from largest to smallest
mdl_output[order(mdl_output$p.value, decreasing = TRUE)]
# Create dataframe mdl_output from summary(mdl_fit)
mdl_output <- as.data.frame(tibble(summary(mdl_fit)$coefficients))
# Sort mdl_output coefficients by p-value from largest to smallest
mdl_output[order(mdl_output$p.value, decreasing = TRUE), ]
mdl_output
mdl_output <- as.data.frame(tibble(summary(mdl_fit)$coefficients))
mdl_output
as.data.frame(tibble(summary(mdl_fit)$coefficients))
as.data.frame(tibble(summary(mdl_fit)$coefficients[,]))
as.data.frame(tibble(summary(mdl_fit)$coefficients[,1]))
as.data.frame(tibble(summary(mdl_fit)$coefficients[,2]))
as.data.frame(tibble(summary(mdl_fit)$coefficients[,3]))
as.data.frame(tibble(summary(mdl_fit)$coefficients[,4]))
as.data.frame(tibble(summary(mdl_fit)$coefficients[:,4]))
summary(mdl_fit)$coefficients
tibble(summary(mdl_fit)$coefficients)
as.data.frame(tibble(summary(mdl_fit)$coefficients))
mdl_output <- tibble(summary(mdl_fit)$coefficients)
mdl_output
class(mdl_output)
tibble(summary(mdl_fit)$coefficients)
class(tibble(summary(mdl_fit)$coefficients))
class(as.data.frame(tibble(summary(mdl_fit)$coefficients)))
as.data.frame(tibble(summary(mdl_fit)$coefficients))
as_data_frame(tibble(summary(mdl_fit)$coefficients))
class(as_data_frame(tibble(summary(mdl_fit)$coefficients)))
mdl_output
class(mdl_output)
data.frame(mdl_output)
str(mdl_output)
mdl_output <- to.data.frame(mdl_output)
mdl_output <- as.data.frame(mdl_output)
str(mdl_output)
mdl_output
as.data.frame(mdl_output)
summ(mdl_fit)
mdl_output
str(mdl_output)
class(tibble(summary(mdl_fit)$coefficients))
class(tidy(summary(mdl_fit)$coefficients))
tidy(mdl_fit)
tidy(mdl_fit, conf.level = TRUE)
tidy(mdl_fit)
class(tidy(mdl_fit))
class(as.data.frame(tidy(mdl_fit)))
# Create dataframe mdl_output from summary(mdl_fit)
mdl_output <- as.data.frame(tibble(summary(mdl_fit)$coefficients))
# Sort mdl_output coefficients by p-value from largest to smallest
mdl_output[order(mdl_output$p.value, decreasing = TRUE), ]
class((tidy(mdl_fit))
class((tidy(mdl_fit)))
as.data.frame(tidy(mdl_fit))
# Create dataframe mdl_output from summary(mdl_fit) using tidy()
mdl_output <- as.data.frame(tidy(mdl_fit))
# Sort mdl_output coefficients by p-value from largest to smallest
mdl_output[order(mdl_output$p.value, decreasing = TRUE), ]
# Access levels() for each variable
levels(init_mdl$Initial_admin)
levels(init_mdl$Complication_risk)
# Assign full initial model (using all previously selected vars) to mdl_fit
mdl_fit <- lm(Initial_days ~ .,
data = init_mdl)
# View summary of initial model
summary(mdl_fit)
# Assign full initial model (using all previously selected vars) to mdl_fit
mdl_fit <- lm(Initial_days ~ .,
data = init_mdl)
# View summary of initial model
summary(mdl_fit)
anova(mdl_fit)
# Assign full initial model (using all previously selected vars) to mdl_fit
mdl_fit <- lm(Initial_days ~ .,
data = init_mdl)
# View summary of initial model
summary(mdl_fit)
mdl_back <- ols_step_backward_p(mdl_fit, details = TRUE, prem = .1)
library(olsrr)
# Load in packages without messages
suppressMessages(library(tidyverse))
suppressMessages(library(skimr))
suppressMessages(library(Hmisc))
suppressMessages(library(broom))
suppressMessages(library(olsrr))
suppressMessages(library(car))
# Load in packages without messages
suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(skimr))
suppressPackageStartupMessages(library(Hmisc))
suppressPackageStartupMessages(library(broom))
suppressPackageStartupMessages(library(olsrr))
suppressPackageStartupMessages(library(car))
# Read dataset in
df <- read.csv("./data/medical_clean.csv")
# Start with a quick skim of the data for orientation and future reference
(df)
# Partition dataset to include only features to be initially included in model
# Initial_days is reordered to first position for ease of reference
init_mdl <- df %>%
select(Initial_days,
Area,
Children:Services)
# View new dataframe and assess dtypes
init_mdl %>%
skim()
# Start with reformatting all chr variables as fct
init_mdl[sapply(init_mdl, is.character)] <- lapply(init_mdl[sapply(init_mdl, is.character)], as.factor)
# Reassess dataframe structure using skim()
skim_without_charts(init_mdl)
# Access levels() for each variable
levels(init_mdl$Initial_admin)
levels(init_mdl$Complication_risk)
# Re-level ordinal categorical variables for Initial_admin
init_mdl$Initial_admin <- factor(init_mdl$Initial_admin,
levels = c("Emergency Admission",
"Observation Admission",
"Elective Admission"))
# Re-level ordinal categorical variables for Complication_risk
init_mdl$Complication_risk <- factor(init_mdl$Complication_risk,
levels = c("Medium",
"Low",
"High"))
# Access levels() for each variable
levels(init_mdl$Initial_admin)
levels(init_mdl$Complication_risk)
# Show histograms for all numeric variables
par(mfrow = c(3,4))
hist(init_mdl %>%
select_if(is.numeric))
# Partition dichotomous Yes/No variables out for plot
dichotomous_vars <- init_mdl %>%
select(where(~n_distinct(.) == 2))
# Show bar charts of all Yes/No variables
dichotomous_vars %>%
gather() %>%
count(key, value) %>%
ggplot(., aes(x = value, y = n)) +
geom_bar(stat = "identity") +
facet_wrap(~key, scales = "free", nrow = 3)
# Partition non-dichotomous categorical variables
cat_vars <- init_mdl %>%
select_if(is.factor) %>%
select(where(~n_distinct(.) != 2))
# Rename levels to shorter versions to fit plots
levels(cat_vars$Marital) <- c("Divorced",
"Married",
"Never",
"Sep",
"Widow")
levels(cat_vars$Initial_admin) <- c("Elective",
"Observation",
"Emergency")
# Create panel of bar charts for cat_vars
par(mfrow = c(3,2))
barplot(table(cat_vars$Area), main = "Geographical Area")
barplot(table(cat_vars$Marital), main = "Marital Status")
barplot(table(cat_vars$Gender), main = "Gender")
barplot(table(cat_vars$Initial_admin), main = "Reason for Initial Admission")
barplot(table(cat_vars$Complication_risk), main = "Complication Risk")
barplot(table(cat_vars$Services), main = "Services Used")
# Partition model data for only numeric variables
num_vars <- init_mdl %>%
select_if(is.numeric)
# Show scatterplot matrix of numeric variables
pairs(num_vars)
# Boxplots of our target variable against some categorical variables
par(mfrow = c(2,3))
boxplot(Initial_days ~ Complication_risk, data = init_mdl)
boxplot(Initial_days ~ Gender, data = init_mdl)
boxplot(Initial_days ~ Overweight, data = init_mdl)
boxplot(Initial_days ~ Anxiety, data = init_mdl)
boxplot(Initial_days ~ ReAdmis, data = init_mdl)
boxplot(Initial_days ~ Initial_admin, data = init_mdl)
write.csv(init_mdl, "./data/initmdl.csv")
# Assign full initial model (using all previously selected vars) to mdl_fit
mdl_fit <- lm(Initial_days ~ .,
data = init_mdl)
# View summary of initial model
summary(mdl_fit)
# Load in packages without messages
library(tidyverse, quietly = TRUE)
suppressPackageStartupMessages(library(skimr))
suppressPackageStartupMessages(library(Hmisc))
suppressPackageStartupMessages(library(broom))
suppressPackageStartupMessages(library(olsrr))
suppressPackageStartupMessages(library(car))
install.packages("tidyverse")
install.packages("installr")
library(installr)
updateR()
