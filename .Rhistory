levels = c("Elective Admission",
"Observation Admission",
"Emergency Admission"),
ordered = TRUE)
init_mdl$Complication_risk <- factor(init_mdl$Complication_risk,
levels = c("Low",
"Medium",
"High"),
ordered = TRUE)
init_mdl$Initial_admin <- factor(init_mdl$Initial_admin,
levels = c("Elective Admission",
"Observation Admission",
"Emergency Admission"),
ordered = TRUE)
init_mdl$Complication_risk <- factor(init_mdl$Complication_risk,
levels = c("Low",
"Medium",
"High"),
ordered = TRUE)
init_mdl$Initial_admin <- factor(init_mdl$Initial_admin,
levels = c("Elective Admission",
"Observation Admission",
"Emergency Admission"),
ordered = TRUE)
init_mdl$Complication_risk <- factor(init_mdl$Complication_risk,
levels = c("Low",
"Medium",
"High"),
ordered = TRUE)
# Access levels() for each variable
levels(init_mdl$Initial_admin)
levels(init_mdl$Complication_risk)
# Check if the factor is ordered
is.ordered(init_mdl$Initial_admin)
is.ordered(init_mdl$Complication_risk)
plots(init_mdl)
plot(init_mdl)
hist(init_mdl)
hist.data.frame(init_mdl)
hist.data.frame(init_mdl, nclass = 2 )
hist.data.frame(init_mdl, nrow(5) )
hist.data.frame(init_mdl, nrows(5) )
hist(init_mdl, freq = TRUE)
hist(init_mdl[is.numeric(init_mdl)], freq = TRUE)
hist(init_mdl[is.numeric(init_mdl)], freq = TRUE)
hist(init_mdl, freq = TRUE)
hist(init_mdl,
freq = TRUE,
n.unique = 4)
hist(init_mdl,
freq = TRUE,
n.unique = 10)
par(mfrow = c(7,3))
hist(init_mdl)
par(mfrow = c(7,2))
hist(init_mdl)
par(mfrow = c(7,1))
hist(init_mdl)
par(mfrow = c(2,1))
hist(init_mdl)
par(mfrow = c(2,2))
hist(init_mdl)
par(mfrow = c(3,3))
hist(init_mdl)
par(mfrow = c(3,3))
hist(init_mdl) %>%
select(is.numeric)
par(mfrow = c(3,3))
hist(init_mdl %>% select(is.numeric))
par(mfrow = c(3,3))
hist(init_mdl %>% select(where(is.numeric)))
par(mfrow = c(4,3))
hist(init_mdl %>%
select(where(is.numeric)))
par(mfrow = c(3,4))
hist(init_mdl %>%
select(where(is.numeric)))
# par(mfrow = c(3,4))
par(mfrow = 3)
par(mfrow = c(3,4))
par(mfrow = c(3,4))
hist(init_mdl %>%
select(where(is.numeric)))
par(mfrow = c(4,3),
)
par(mfrow = c(4,3))
hist(init_mdl %>%
select(where(is.numeric)))
par(mfrow = c(3,5))
hist(init_mdl %>%
select(where(is.numeric)))
par(mfrow = c(3,4))
hist(init_mdl %>%
select(where(is.numeric)))
par(mfrow = c(3,4))
hist(init_mdl %>%
select(where(is.factor)))
par(mfrow = c(3,3))
hist(init_mdl %>%
select(where(is.factor)))
par(mfrow = c(4,3))
hist(init_mdl %>%
select(where(is.factor)))
par(mfrow = c(4,3))
line(init_mdl %>%
select(where(is.factor)))
par(mfrow = c(4,3))
barchart(init_mdl %>%
select(where(is.factor)))
par(mfrow = c(4,3))
barchart(init_mdl %>%
select(where(is.factor)))
par(mfrow = c(4,3))
par(mfrow = c(4,3))
hist(init_mdl %>%
select(where(is.factor)))
barplot(init_mdl$Gender)
barplot(init_mdl["Gender"])
init_mdl$Gender %>%
ggplot(
aes(Gender) +
geom_bar()
)
init_mdl %>%
ggplot(Gender,
aes(Gender) +
geom_bar()
)
ggplot(Gender,
aes(Gender)) +
geom_bar()
ggplot(init_mdl,
aes(Gender)) +
geom_bar()
ggplot(init_mdl, aes(Gender)) +
geom_bar()
# Load in the tidyverse
# Suppress the overwritten functions messages
suppressPackageStartupMessages(library(tidyverse))
library(skimr)
library(Hmisc)
# Read dataset in
df <- read.csv("./data/medical_clean.csv")
# Start with a quick glimpse of the data for orientation and future reference
glimpse(df)
# Partition dataset to include only features to be initially included in model
# Initial_days is reordered to first position for ease of reference
init_mdl <- df %>%
select(Initial_days,
Area,
Children:Services,
TotalCharge,
Additional_charges)
# View new dataframe and assess dtypes
init_mdl %>%
glimpse()
# Start with reformatting all chr variables as fct
init_mdl[sapply(init_mdl, is.character)] <- lapply(init_mdl[sapply(init_mdl, is.character)], as.factor)
# Reassess dataframe structure using skim()
skim_without_charts(init_mdl)
# Access levels() for each variable
levels(init_mdl$Initial_admin)
levels(init_mdl$Complication_risk)
# Check if the factor is ordered
is.ordered(init_mdl$Initial_admin)
is.ordered(init_mdl$Complication_risk)
# Re-level ordinal categorical variables for Initial_admin
init_mdl$Initial_admin <- factor(init_mdl$Initial_admin,
levels = c("Elective Admission",
"Observation Admission",
"Emergency Admission"),
ordered = TRUE)
# Re-level ordinal categorical variables for Complication_risk
init_mdl$Complication_risk <- factor(init_mdl$Complication_risk,
levels = c("Low",
"Medium",
"High"),
ordered = TRUE)
# Access levels() for each variable
levels(init_mdl$Initial_admin)
levels(init_mdl$Complication_risk)
# Check if the factor is ordered
is.ordered(init_mdl$Initial_admin)
is.ordered(init_mdl$Complication_risk)
# Set custom skim() for C2: Summary Statistics
# For numeric include mean, median, stdev, min, Q25, Q75, and max
# For factor include count of unique values and value counts for each
my_skim <- skim_with(
base = sfl(),
numeric = sfl(Mean = mean,
Median = median,
StDev = sd,
Min = min,
Q25 = ~ quantile(., probs = .25),
Q75 = ~ quantile(., probs = .75),
Max = max),
factor = sfl(Unique_Values = n_unique,
Value_Counts = top_counts),
append = FALSE
)
# Call new skim format
my_skim(init_mdl)
par(mfrow = c(3,4))
hist(init_mdl %>%
select(where(is.numeric)))
par(mfrow = c(4,3))
hist(init_mdl %>%
select(where(is.factor)))
ggplot(init_mdl, aes(Gender)) +
geom_bar()
ggplot(init_mdl, aes(Gender)) +
geom_bar()
ggplot(init_mdl, aes(Gender)) +
geom_bar()
ggplot(init_mdl, aes(value)) +
geom_histogram(bins = 10) +
facet_wrap(~key, scales = 'free_x')
# Load in the tidyverse
# Suppress the overwritten functions messages
suppressPackageStartupMessages(library(tidyverse))
library(skimr)
library(Hmisc)
# Read dataset in
df <- read.csv("./data/medical_clean.csv")
# Start with a quick glimpse of the data for orientation and future reference
glimpse(df)
# Partition dataset to include only features to be initially included in model
# Initial_days is reordered to first position for ease of reference
init_mdl <- df %>%
select(Initial_days,
Area,
Children:Services,
TotalCharge,
Additional_charges)
# View new dataframe and assess dtypes
init_mdl %>%
glimpse()
# Start with reformatting all chr variables as fct
init_mdl[sapply(init_mdl, is.character)] <- lapply(init_mdl[sapply(init_mdl, is.character)], as.factor)
# Reassess dataframe structure using skim()
skim_without_charts(init_mdl)
# Access levels() for each variable
levels(init_mdl$Initial_admin)
levels(init_mdl$Complication_risk)
# Check if the factor is ordered
is.ordered(init_mdl$Initial_admin)
is.ordered(init_mdl$Complication_risk)
# Re-level ordinal categorical variables for Initial_admin
init_mdl$Initial_admin <- factor(init_mdl$Initial_admin,
levels = c("Elective Admission",
"Observation Admission",
"Emergency Admission"),
ordered = TRUE)
# Re-level ordinal categorical variables for Complication_risk
init_mdl$Complication_risk <- factor(init_mdl$Complication_risk,
levels = c("Low",
"Medium",
"High"),
ordered = TRUE)
# Access levels() for each variable
levels(init_mdl$Initial_admin)
levels(init_mdl$Complication_risk)
# Check if the factor is ordered
is.ordered(init_mdl$Initial_admin)
is.ordered(init_mdl$Complication_risk)
par(mfrow = c(3,4))
hist(init_mdl %>%
select(where(is.numeric)))
par(mfrow = c(4,3))
hist(init_mdl %>%
select(where(is.factor)))
ggplot(init_mdl, aes(value)) +
geom_histogram(bins = 10) +
facet_wrap(~key, scales = 'free_x')
ggplot(gather(init_mdl), aes(value)) +
geom_histogram(bins = 10) +
facet_wrap(~key, scales = 'free_x')
ggplot(gather(init_mdl), aes(count)) +
geom_histogram(bins = 10) +
facet_wrap(~key, scales = 'free_x')
ggplot(gather(init_mdl), aes(value)) +
geom_histogram(bins = 10) +
facet_wrap(~key, scales = 'free_x')
ggplot(gather(init_mdl %>% select_if(is.numeric)), aes(value)) +
geom_histogram(bins = 10) +
facet_wrap(~key, scales = 'free_x')
ggplot(gather(init_mdl %>% select_if(is.numeric)), aes(value)) +
geom_histogram(bins = 20) +
facet_wrap(~key, scales = 'free_x')
par(mfrow = c(3,4))
hist.data.frame(init_mdl %>%
select(where(is.numeric)))
par(mfrow = c(4,4))
hist(init_mdl %>%
select(where(is.numeric)))
par(mfrow = c(2,4))
hist(init_mdl %>%
select(where(is.numeric)))
par(mfrow = c(2,5))
hist(init_mdl %>%
select(where(is.numeric)))
par(mfrow = c(3,4))
hist(init_mdl %>%
select(where(is.numeric)))
par(mfrow = c(2,5))
hist(init_mdl %>%
select(where(is.numeric)))
par(mfrow = c(5,2))
hist(init_mdl %>%
select(where(is.numeric)))
par(mfrow = c(4,4))
hist(init_mdl %>%
select(where(is.numeric)))
par(mfrow = c(2,2))
hist(init_mdl %>%
select(where(is.numeric)))
par(mfrow = c(2,3))
hist(init_mdl %>%
select(where(is.numeric)))
par(mfrow = c(3,3))
hist(init_mdl %>%
select(where(is.numeric)))
par(mfrow = c(3,3))
plot(init_mdl %>%
select(where(is.numeric)))
par(mfrow = c(3,3))
pairs(init_mdl %>%
select(where(is.numeric)))
par(mfrow = c(3,3))
hist(init_mdl %>%
select(where(is.numeric)))
par(mfrow = c(3,3))
hist(init_mdl %>%
select_if(is.numeric))
par(mfrow = c(3,4))
hist(init_mdl %>%
select_if(is.numeric))
par(mfrow = c(4,3))
hist(init_mdl %>%
select_if(is.numeric))
par(mfrow = c(3,4))
hist(init_mdl %>%
select_if(is.numeric))
par(mfrow = c(4,3))
hist(init_mdl %>%
select(where(n_unique == 2)))
par(mfrow = c(4,3))
hist(init_mdl %>%
select_if(~n_distinct(.) == 2))
barplot(init_mdl$Gender)
barplot(y = init_mdl$Gender)
barplot(height = init_mdl$Gender)
barplot(as.matrix(init_mdl$Gender))
barplot(as.matrix(init_mdl$Gender))
as.matrix(init_mdl$Gender)
table(init_mdl$Gender)
as.matrix(table(init_mdl$Gender))
barplot(as.matrix(table(init_mdl$Gender)))
gather(init_mdl %>% select_if(~n_distinct == 2))
(init_mdl %>% select_if(~n_distinct == 2))
(init_mdl %>% select_if(~n_distinct(.) == 2))
gather(init_mdl %>% select_if(~n_distinct(.) == 2))
plot(init_mdl$Gender)
plot(c(init_mdl$Gender, init_mdl$ReAdmis)
plot(c(init_mdl$Gender, init_mdl$ReAdmis))
plot(init_mdl %>% select(Gender, ReAdmis)))
plot(init_mdl %>% select(Gender, ReAdmis))
plot(init_mdl %>% select(Gender, ReAdmis, Initial_admin))
hist(init_mdl %>% select(Gender, ReAdmis, Initial_admin), )
histboxp(init_mdl %>% select(Gender, ReAdmis, Initial_admin), )
summaryM(init_mdl %>% select(Gender, ReAdmis, Initial_admin), )
summaryM(init_mdl %>% select(Gender, ReAdmis, Initial_admin))
summaryM(init_mdl)
summaryP(init_mdl)
summaryP(~n_distinct(.) == 2, data = init_mdl)
summaryP(~n_distinct(init_mdl) == 2)
par(mfrow = c(4,3))
plot(init_mdl %>%
select_if(~n_distinct(.) == 2)) %>%
table()
init_mdl %>%
select_if(~n_distinct(.) == 2)) %>%
init_mdl %>%
select_if(~n_distinct(.) == 2) %>%
table()
init_mdl %>%
table()
table(init_mdl) %>%
select_if(~n_distinct(.) == 2)
table(init_mdl %>% select_if(~n_distinct(.) == 2))
init_mdl %>% select_if(~n_distinct(.) == 2))
init_mdl %>%
select_if(~n_distinct(.) == 2))
init_mdl %>%
select_if(~n_distinct(.) == 2)
init_mdl
data
data[["Gender"]]
data["Gender"]
# Load in the tidyverse
# Suppress the overwritten functions messages
suppressPackageStartupMessages(library(tidyverse))
library(skimr)
library(Hmisc)
# Read dataset in
df <- read.csv("./data/medical_clean.csv")
# Start with a quick glimpse of the data for orientation and future reference
glimpse(df)
# Partition dataset to include only features to be initially included in model
# Initial_days is reordered to first position for ease of reference
init_mdl <- df %>%
select(Initial_days,
Area,
Children:Services,
TotalCharge,
Additional_charges)
# View new dataframe and assess dtypes
init_mdl %>%
glimpse()
# Start with reformatting all chr variables as fct
init_mdl[sapply(init_mdl, is.character)] <- lapply(init_mdl[sapply(init_mdl, is.character)], as.factor)
# Reassess dataframe structure using skim()
skim_without_charts(init_mdl)
# Access levels() for each variable
levels(init_mdl$Initial_admin)
levels(init_mdl$Complication_risk)
# Check if the factor is ordered
is.ordered(init_mdl$Initial_admin)
is.ordered(init_mdl$Complication_risk)
# Re-level ordinal categorical variables for Initial_admin
init_mdl$Initial_admin <- factor(init_mdl$Initial_admin,
levels = c("Elective Admission",
"Observation Admission",
"Emergency Admission"),
ordered = TRUE)
# Re-level ordinal categorical variables for Complication_risk
init_mdl$Complication_risk <- factor(init_mdl$Complication_risk,
levels = c("Low",
"Medium",
"High"),
ordered = TRUE)
# Access levels() for each variable
levels(init_mdl$Initial_admin)
levels(init_mdl$Complication_risk)
# Check if the factor is ordered
is.ordered(init_mdl$Initial_admin)
is.ordered(init_mdl$Complication_risk)
# Show histograms for all numeric variables
par(mfrow = c(3,4))
hist(init_mdl %>%
select_if(is.numeric))
data
df
init_mdl
init_mdl$Gender %>%
table()
init_mdl$Gender %>%
kable()
init_mdl$Gender %>%
table()
init_mdl$Gender %>%
table()[1]
init_mdl$Gender %>%
table()
test1 <- init_mdl$Gender %>%
table()
test1
test1 <- init_mdl$Gender %>%
table()
typeof(test1)
test1 <- init_mdl$Gender %>%
table()
test1[1]
test1 <- init_mdl$Gender %>%
table()
test1[1][0]
test1 <- init_mdl$Gender %>%
table()
test1[0][1]
test1 <- init_mdl$Gender %>%
table()
test1[0][0]
test1 <- init_mdl$Gender %>%
table()
test1[3][0]
test1 <- init_mdl$Gender %>%
table()
test1[1][0]
test1 <- init_mdl$Gender %>%
table()
test1[1][1]
test1 <- init_mdl$Gender %>%
table()
test1[1][2]
test1 <- init_mdl$Gender %>%
table()
test1[2][2]
test1 <- init_mdl$Gender %>%
table()
test1[2][1]
test1 <- init_mdl$Gender %>%
table()
test1
test1[2][1]
test1 <- init_mdl$Gender %>%
table()
test1
test1[1][1]
table(init_mdl$Gender)
table(init_mdl$ReAdmis)
init_mdl %>%
gather(~n_unique(.) == 2)
